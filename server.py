from flask import Flask, request, jsonify
import google.generativeai as genai
import re
from random import *

app = Flask(__name__)

# Replace with your actual API endpoint and key for Google Gemini
API_KEY = "AIzaSyBAC3Q5Bukp7rtZ6xmExAe1VDtWFvrgczA"

genai.configure(api_key=API_KEY)
model = genai.GenerativeModel("gemini-1.5-flash")

@app.route('/process', methods=['POST'])
def process_message():
    data = request.get_json()
    message = data.get('message', '')
    
    StathamPattern = r"—Ç[–µ—ç]—Ç—Ö[–µ—ç]–º"
    StathamQuotes = [
                    "–°—É–¥–Ω–æ –∑–Ω–∞–µ—à—å? –Ø –∑–∞—Å—É–¥–∏–ª", 
                     "–¢–∏—Ö–∏–π –æ–∫–µ–∞–Ω –∑–Ω–∞–µ—à—å? –Ø —É—Å–º–∏—Ä–∏–ª", 
                     "–°–æ–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ –®—Ç–∞—Ç—ã –∑–Ω–∞–µ—à—å? –Ø —Å–æ–µ–¥–∏–Ω–∏–ª", 
                     "–ú—ã –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –º—ã–º–∏, –∞ –æ–Ω–∏ ‚Äì –æ–Ω–∏–º–∏",
                     "–ï—Å–ª–∏ –∑–∞–±–ª—É–¥–∏–ª—Å—è –≤ –ª–µ—Å—É, –∏–¥–∏ –¥–æ–º–æ–π",
                     "–í –∂–∏–∑–Ω–∏ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –¥–≤–µ –¥–æ—Ä–æ–≥–∏: –æ–¥–Ω–∞ ‚Äî –ø–µ—Ä–≤–∞—è, –∞ –¥—Ä—É–≥–∞—è ‚Äî –≤—Ç–æ—Ä–∞—è",
                     "–î–µ–ª–∞–π, –∫–∞–∫ –Ω–∞–¥–æ. –ö–∞–∫ –Ω–µ –Ω–∞–¥–æ, –Ω–µ –¥–µ–ª–∞–π",
                     "–†–∞–±–æ—Ç–∞ ‚Äî —ç—Ç–æ –Ω–µ –≤–æ–ª–∫. –†–∞–±–æ—Ç–∞ ‚Äî –≤–æ—Ä–∫. –ê –≤–æ–ª–∫ ‚Äî —ç—Ç–æ —Ö–æ–¥–∏—Ç—å",
                     "–ú–∞—Ä–∏–∞–Ω—Å–∫—É—é –≤–ø–∞–¥–∏–Ω—É –∑–Ω–∞–µ—à—å? –≠—Ç–æ —è —É–ø–∞–ª",
                     "–ù–µ –±—É–¥—å—Ç–µ —ç–≥–æ–∏—Å—Ç–∞–º–∏, –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –¥—É–º–∞–π—Ç–µ –æ —Å–µ–±–µ!",
                     "–†–∞–±–æ—Ç–∞ –Ω–µ –≤–æ–ª–∫. –ù–∏–∫—Ç–æ –Ω–µ –≤–æ–ª–∫. –¢–æ–ª—å–∫–æ –≤–æ–ª–∫ –≤–æ–ª–∫"
                     ]
    if re.search(StathamPattern, message, re.IGNORECASE):
        chosen_quote = StathamQuotes[randint(0, len(StathamQuotes)-1)]
        return jsonify({'response': chosen_quote})

    Patterns2 = r"—Å–µ–±–µ"
    Patterns2Answers = [
                        "–ö–æ–≥–¥–∞ —è –∑–∞—Ö–æ–∂—É –≤ –∑–∞–ª —Ç—Ä–µ–Ω–∞–∂—ë—Ä –¥–µ–ª–∞–µ—Ç –æ—Ç–∂–∏–º–∞–Ω–∏—è",
                        "–ö–æ–≥–¥–∞ —è –æ—Ç–∫—Ä—ã–≤–∞—é –æ–∫–Ω–æ, –æ–∫–Ω–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø—Ä–æ—Ö–ª–æ–¥–Ω—ã–º",
                        "”©"
                     ]
    if re.search(Patterns2, message, re.IGNORECASE):
        chosen_quote = Patterns2Answers[randint(0, len(Patterns2Answers)-1)]
        return jsonify({'response': chosen_quote})

    Patterns3 = r"–ø—Ä–µ–¥—Å–∫"
    Patterns3Answers = [
                        "–î–∞",
                        "–ù–µ—Ç",
                        "–í–æ–∑–º–æ–∂–Ω–æ",
                        "–î–∞ –Ω–µ—Ç –Ω–∞–≤–µ—Ä–Ω–æ–µ",
                        "–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –Ω–µ—Ç",
                        "–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –¥–∞",
                        "–í –ø—Ä–∏–Ω—Ü–∏–ø–µ –º–æ–∂–Ω–æ",
                        "–í –ø—Ä–∏–Ω—Ü–∏–ø–µ –º–æ–∂–Ω–æ",
                        "–í –ø—Ä–∏–Ω—Ü–∏–ø–µ –º–æ–∂–Ω–æ",
                        "–í –ø—Ä–∏–Ω—Ü–∏–ø–µ –º–æ–∂–Ω–æ",
                        "–ù–µ –±—É–¥–µ–º –∏—Å–∫–ª—é—á–∞—Ç—å"
                     ]
    if re.search(Patterns3, message, re.IGNORECASE):
        chosen_quote = Patterns3Answers[randint(0, len(Patterns3Answers)-1)]
        return jsonify({'response': chosen_quote})
    
    gemini_response = model.generate_content(message)
    response = gemini_response.text
    response = re.sub(r"\*\*(.*?)\*\*", r"<b>\1</b>", response)
    response = re.sub(r"(?<!\*)\*(?!\*)", "<br>", response)
    # Logic to process the message
    response_message = f"–ö–ª–∏–º –≥–æ–≤–æ—Ä–∏—Ç: {response}"

    potomus = ["–ü–æ—Ç–æ–º—É —á—Ç–æ", "–ü–æ–∫–∞—á–µ–Ω—É", "–í–æ—Ç —Ç–∞–∫ –≤–æ—Ç", "–í–æ–ø—Ä–æ—Å—ã?", "–ê –Ω—É –≤ –æ–±—â–µ–º –∑–Ω–∞—á–∏—Ç —Å–ª—É—à–∞–π –∑–Ω–∞—á–∏—Ç —Å–º–æ—Ç—Ä–∏ –∑–Ω–∞—á–∏—Ç –≤ –æ–±—â–µ–º —Å–ª—É—à–∞–π —ç—Ç–æ —Å–∞–º–æ–µ –º–¥–∞", "–Ø —Ç–µ–±–µ –∑–∞–ø—Ä–µ—â–∞—é –∑–∞–¥–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.", "—ä—É—ä", "—ä", "ü§åüèªü§åüèª", "”©"]
    potomu = randint(1,2)
    msg = potomus[randint(0, len(potomus)-1)]
    if potomu == 1:
        return jsonify({'response': response_message})
    else:
        return jsonify({'response': msg})

if __name__ == '__main__':
    app.run(debug=True, port=5000)

